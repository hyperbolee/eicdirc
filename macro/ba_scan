#!/bin/bash

show_help(){
	help="  NAME
    ba_scan - script to run sim/reco for eicdirc

  SYNOPSIS
    ba_scan [OPTION]

  DESCRIPTION 
     -r 
        run type
        0 - run sim + reco
        1 - run lut
        2 - run only reco
        10 - run sim 2 part + reco
        11 - run 2 part  reco
        12 - run sim 2 part
     -j
        number of threads 
     -e 
        # of events per thread
     -s 
        angle step 
     -v 
        verbose level
        0 - print nothing (default)
        1 - print text messages
        2 - draw plots
     -t 
        test value
     -n 
        silent run

     -m
        particle momentum

     -p
        pixel size in mm

     -c
        MCP layout
        3 - one MCP covering detector plane
        4 - 4x6 grid of MCPs (not working yet)"
	
    echo "$help" 
}

waitForMe (){
    while : 
    do 
		activth=$(ps aux | grep "[e]icdirc" | wc -l)
		printf "\r$statusline [$activth] ---- [$(($(date +%s) - start_time)) s] "
		sleep .1
		if [ "$activth" -lt "$1" ]; then 
			break  
		fi
    done
}  

OPTIND=1 
while getopts "h?r:j:s:e:v:t:m:p:c:n" opt; do
    case "$opt" in
		h|\?)
            show_help
            exit 0
            ;;
		j)  threads=$OPTARG
            ;;
		r)  run=$OPTARG
            ;;
		s)  astep=$OPTARG
            ;;
		e)  nevents=$OPTARG
            ;;
		v)  verbose=$OPTARG
            ;;
		t)  test1=$OPTARG
            ;;
		n)  silent=1
			;;
		m)  momentum=$OPTARG
			;;
		p)  pixel=$OPTARG
			;;
		c)  layout=$OPTARG
    esac
done

nevents=${nevents:-10}
endEvent=${endEvent:-100000000} 
threads=${threads:-6}
astep=${astep:-2}
run=${run:-0}
verbose=${verbose:-0}
test1=${test1:-0}
silent=${silent:-0}
momentum=${momentum:-6}
pixel=${pixel:-3}
layout=${layout:-3}

shift $((OPTIND-1))


tseed=$(($(date +%s%N)/1000000-1393400000000))
printf "====== Run EICDIRC with $tseed seed base ======\n"

# default simulation options
simopt="-p ${momentum} -w 0 -g 1 -h 11 -c ${layout} -pix ${pixel} -l 3 -d 0 -b 1"

if [ ${run} == "1" ]; then
    seq 0 9 | xargs -I{} -n1 -P10 ../build/eicdirc -o ../data/l_b{}.root -s 1 -r {}{} ${simopt[@]} -x "opticalphoton" -p "3.18 eV"  -e 1000000 >> /dev/null # run LUT creation
    sleep 5
    hadd -f ../data/lut_c${layout}_p${pixel}.root ../data/l_b*.root # combine all LUT runs
    sleep 5
	rm ../data/l_b*.root # clean up
    root -q -b loadlib.C lutmean.C"(\"../data/lut_c${layout}_p${pixel}\")" # make averaged LUT
    exit
fi

#------------------------------------------------------------------------------- -#
#\/\/\/\//\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/#
#------------------------------------------------------------------------------ --#

# run simulation for pions and kaons
if [ ${run} == "10" -o ${run} == "12" ]; then
    start_time=$(date +%s)
    statusline="GSim"
    for i in $(eval echo {30..150..${astep}}); do 
		../build/eicdirc -r $tseed$i -o ../simulation/h1_b$i.root -s 0 -a $i -x "pi+" -e $nevents  ${simopt[@]} -v $verbose  > /dev/null  &
		waitForMe $threads
    done
    waitForMe "1"
    for i in $(eval echo {30..150..${astep}}); do 
		../build/eicdirc -r $tseed$i -o ../simulation/h2_b$i.root -s 0 -a $i -x "kaon+" -e $nevents  ${simopt[@]} -v $verbose  > /dev/null  &
		waitForMe $threads
    done
    waitForMe "1"

	sleep 5
	printf "\ncombining sim files... \n"
	for i in $(eval echo {30..150..${astep}}); do
		hadd -f ../simulation/sim_c${layout}_p${pixel}_$i.root ../simulation/h*_b$i.root &> /dev/null
		rm ../simulation/h1_b$i.root
		rm ../simulation/h2_b$i.root
	done

	waitForMe "1"
    printf "\r$statusline [-] done [$(($(date +%s) - start_time)) s]     \n"
fi

#---------------------------------------------------------------------------------#
#\/\/\/\//\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/#
#---------------------------------------------------------------------------------#

# reconstruct pions and kaons for normal and averaged LUT
if [ ${run} == "11" -o ${run} == "10" ]; then
	start_time=$(date +%s)
    statusline="GReco"
	
	for i in $(eval echo {30..150..${astep}}); do
		../build/eicdirc -s 2 -i ../simulation/sim_c${layout}_p${pixel}_$i.root -u ../data/lut_c${layout}_p${pixel}.root -o ../simulation/reco/reco_c${layout}_p${pixel}_$i.root -e $((2 * $nevents)) &> /dev/null &
		waitForMe $threads
	done
	
	waitForMe "1"
	printf "\r$statusline [-] done [$(($(date +%s) - start_time)) s]     \n"

	statusline="GRecoAvr"
	for i in $(eval echo {30..150..${astep}}); do
		../build/eicdirc -s 2 -i ../simulation/sim_c${layout}_p${pixel}_$i.root -u ../data/lut_c${layout}_p${pixel}_avr.root -o ../simulation/reco/avr/reco_c${layout}_p${pixel}_$i.root -e $((2 * $nevents)) &> /dev/null &
		waitForMe $threads
	done
	
	waitForMe "1"
	printf "\r$statusline [-] done [$(($(date +%s) - start_time)) s]     \n"
fi

#---------------------------------------------------------------------------------#
#\/\/\/\//\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/#
#---------------------------------------------------------------------------------#

# run reconstruction for pions
if [ ${run} == "0" ]; then
    start_time=$(date +%s)
    statusline="GSim"
    for i in $(eval echo {30..150..${astep}}); do 
		../build/eicdirc -r $tseed$i -o ../simulation/sim_c${layout}_p${pixel}_$i.root -s 0 -a $i -x "pi+" -e $nevents  ${simopt[@]} -v $verbose > /dev/null  &
		waitForMe $threads
    done
    waitForMe "1"
	
    printf "\r$statusline [-] done [$(($(date +%s) - start_time)) s]     \n"
fi

#---------------------------------------------------------------------------------#
#\/\/\/\//\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/#
#---------------------------------------------------------------------------------#

# reconstruct pions for normal and averaged LUT
if [ ${run} == "2" -o ${run} == "0" ]; then
	start_time=$(date +%s)
    statusline="GReco"
	
	for i in $(eval echo {30..150..${astep}}); do
		../build/eicdirc -s 2 -i ../simulation/sim_c${layout}_p${pixel}_$i.root -u ../data/lut_c${layout}_p${pixel}.root -o ../simulation/reco/reco_c${layout}_p${pixel}_$i.root -e $nevents > /dev/null &
		waitForMe $threads
	done
	
	waitForMe "1"
	printf "\r$statusline [-] done [$(($(date +%s) - start_time)) s]     \n"

	statusline="GRecoAvr"
	for i in $(eval echo {30..150..${astep}}); do
		../build/eicdirc -s 2 -i ../simulation/sim_c${layout}_p${pixel}_$i.root -u ../data/lut_c${layout}_p${pixel}_avr.root -o ../simulation/reco/avr/reco_c${layout}_p${pixel}_$i_avr.root -e $nevents > /dev/null &
		waitForMe $threads
	done
	
	waitForMe "1"
	printf "\r$statusline [-] done [$(($(date +%s) - start_time)) s]     \n"
fi

#---------------------------------------------------------------------------------#
#\/\/\/\//\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/#
#---------------------------------------------------------------------------------#


